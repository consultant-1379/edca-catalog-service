pipeline {
    agent {
        node {
            label 'E2c_Testing_Vapp'
        }
    }
    stages {
        stage('Prepare') {
            steps {
                /*
                   Snippet generated from a manual configuration based on the ADP howto:
                   https://confluence.lmera.ericsson.se/pages/viewpage.action?spaceKey=ACD&title=How+to+checkout+sub-modules+in+Jenkins+Pipeline
                   More about snippet generation:
                   https://www.jenkins.io/doc/book/pipeline/getting-started/#snippet-generator
                   ${YOUR_JENKINS_URL}/pipeline-syntax
                */
                sh 'uname -a;whoami;echo $PATH;groups'
                sh 'git clean -xdff'
                sh 'git submodule sync'
                sh 'git submodule update --init --recursive'
                // Ensure that Bob has all of its dependencies.
                /* End of generated snippet */
                sh 'bob/bob --help'
            }
        }
        stage('Clean') {
            steps {
                sh 'bob/bob clean'
            }
        }
        stage('Init') {
            steps {
                sh 'bob/bob init'
                //archiveArtifacts 'artifact.properties'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn -f pom.xml clean package -DskipTests=true -Ddockerfile.skip'
            }
        }
        stage('Build docker image') {
            steps {
                sh 'bob/bob image'
            }
        }
        stage('Create Helm Package') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-artifactory-user', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'),
                                string(credentialsId: 'artifactory-api-token-id', variable: 'HELM_TOKEN')]) {
                        sh 'bob/bob package'
                }
            }
        }
       stage('Helm-Install') {
            steps {
                sh 'bob/bob delete-namespace'
                sh 'bob/bob create-namespace'
                sh 'bob/bob helm-install'
              }
        }
       stage('ZAP Scan') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    withCredentials([string(credentialsId: 'artifactory-api-token-id', variable: 'HELM_TOKEN')]){
                        sh 'echo "System: [$system]"'
                        sh 'echo "Kubeconfig: [$KUBECONFIG]"'
                        sh 'bob/bob zap-scan'
                        archiveArtifacts 'zap/reports/**.*'
                        publishHTML (target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'zap/reports',
                        reportFiles: 'edca-api.html',
                        reportName: "ZAP Scanning Report"
                        ])
                    }
                }
            }
        }
       stage('Nmap Port Scan') {
            steps {
                //lock(resource: null, label: 'bob-ci', quantity: 1, variable: 'system') {
                withCredentials([string(credentialsId: 'artifactory-api-token-id', variable: 'HELM_TOKEN')]){
                sh 'echo "System: [$system]"'
                sh 'echo "Kubeconfig: [$KUBECONFIG]"'
                sh 'bob/bob nmap-port-scan'
                archiveArtifacts 'nmap_reports/nmap_report/**.*'
                    }
                //}
            }
        }
        stage('Trivy scan') {
            steps {
                sh 'bob/bob trivy-inline-scan'
                archiveArtifacts 'build/trivy-reports/**.*'
            }
        }
        stage('X-Ray scan') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    withCredentials([usernamePassword(credentialsId: 'xray-api-token', usernameVariable: 'XRAY_USER', passwordVariable: 'XRAY_TOKEN')]){
                sh """
                    time curl -u $XRAY_USER:$XRAY_TOKEN \
                    --max-time 120 --retry 5 --retry-max-time 120 \
                    -X POST -H "Content-Type: application/json" \
                    -d '{"paths": ["ARM-SELI/docker-v2-global-proj-edca-catalog-service-xray-local/proj-edca-catalog-service/eric-edca-catalog/1.0.0-213"]}' \
                    https://armxray.seli.gic.ericsson.se/api/v1/summary/artifact | jq . &> xray_report.json
                """
                archiveArtifacts 'xray_report.json'
                    }
                }
            }
       }
        stage('Anchore scan') {
            steps {
               // sh 'rm -rf bob/'
               // sh 'cp -R /home/lciadm100/jenkins/workspace/bob /home/lciadm100/jenkins/workspace/edca-catalog-vulnerability-analysis'
                sh 'bob/bob anchore-inline-scan'
                archiveArtifacts 'anchore-reports/**.*'
            }
        }
        stage('Download Tenable.sc') {
            steps {
                 withCredentials([string(credentialsId: 'artifactory-api-token-id', variable: 'HELM_TOKEN')]){
                        sh './bob/bob fetch-tenable-sc-report'
                        archiveArtifacts 'build/tenablesc-reports/**.*'
                }
            }
        }
        stage('Cleanup Anchore/Trivy images') {
            steps {
                sh 'bob/bob cleanup-anchore-trivy-images'
            }
        }
        stage('Generate Vulnerability reports') {
            steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                   withCredentials([usernamePassword(credentialsId: 'xray-api-token', usernameVariable: 'XRAY_USER', passwordVariable: 'XRAY_TOKEN')]) {
                           sh 'bob/bob va-report'
                        //    sh "exit 1"
                           archiveArtifacts 'Vulnerability_Report.md'
                        }
                   }
                }
            }
        stage('Helm-Delete') {
            steps {
                sh 'bob/bob delete-namespace'
                sh 'bob/bob create-namespace'
              }
        }
    }
     post {
        always {
            archiveArtifacts 'Vulnerability_Report.md'
            cleanWs()
       }
    }
}