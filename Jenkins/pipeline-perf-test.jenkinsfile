pipeline {
    agent {
        node {
            label 'E2c_Testing_Vapp'
        }
    }
    stages {
        stage('Prepare') {
            steps {
                sh 'uname -a;whoami;echo $PATH;groups'
                //sh 'git clean -xdff'
                sh 'git submodule sync'
                sh 'git submodule update --init --recursive'
                // Ensure that Bob has all of its dependencies.
                sh 'bob/bob --help'
            }
        }
        stage('Clean') {
            steps {
                sh 'bob/bob clean'
            }
        }
        stage('Init') {
            steps {
                sh 'bob/bob init'
            }
        }
        stage('Unit') {
            steps {
                sh 'mvn -f pom.xml clean jacoco:prepare-agent install jacoco:report -Dspring.profiles.active=unit -Ddockerfile.skip'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn -f pom.xml package -DskipTests=true -Ddockerfile.skip'
            }
        }
        stage('Build docker image') {
            steps {
                sh 'bob/bob image'
            }
        }
        stage('Create Helm Package') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-artifactory-user', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'),
                                string(credentialsId: 'artifactory-api-token-id', variable: 'HELM_TOKEN')]) {
                        sh 'bob/bob package'
                }
            }
        }
        stage('Helm Install') {
            steps {
                sh 'bob/bob delete-namespace'
                sh 'bob/bob create-namespace'
                sh 'bob/bob helm-install'
              }
        }
        stage('Performance Testing') {
            steps {
                sh 'bob/bob perf-execution'
              }
        }
        stage('archiveArtifacts') {
            steps {
                sh 'cp $WORKSPACE/catalog-test/Performance_Tests/logging/{catalog-continous_load_test.log,catalog-concurrent_load_test.log} $WORKSPACE'
                sh 'cp $WORKSPACE/catalog-test/Performance_Tests/report_stats/{catalog-continous_load_test.txt,catalog-concurrent_load_test.txt} $WORKSPACE'
                archiveArtifacts 'catalog-concurrent_load_test.log'
                archiveArtifacts 'catalog-continous_load_test.log'
                archiveArtifacts 'catalog-concurrent_load_test.txt'
                archiveArtifacts 'catalog-continous_load_test.txt'
              }
        }
        stage('Helm-Delete'){
            steps {
               sh 'bob/bob delete-namespace'
               sh 'bob/bob create-namespace'
              }
        }
    }
     post {
        always {
            cleanWs()
       }
    }
}